{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stories marshmallow \u00b6 Use marshmallow schemas as stories context contract. Documentation | Source Code | Task Tracker A paragraph of text explaining the goal of the library\u2026 Pros \u00b6 A feature B feature etc Example \u00b6 A line of text explaining snippet below\u2026 >>> from marshmallow import Schema >>> from marshmallow.fields import String >>> from stories import story , Success >>> from stories_marshmallow import contract >>> class Purchase : ... ... @story ... def make ( I ): ... I . find_user ... ... def find_user ( self , state ): ... return Success () >>> @contract ( Purchase . make ) ... class State ( Schema ): ... ... user = String () Questions \u00b6 If you have any questions, feel free to create an issue in our Task Tracker . We have the question label exactly for this purpose. Enterprise support \u00b6 If you have an issue with any version of the library, you can apply for a paid enterprise support contract. This will guarantee you that no breaking changes will happen to you. No matter how old version you're using at the moment. All necessary features and bug fixes will be backported in a way that serves your needs. Please contact proofit404@gmail.com if you're interested in it. License \u00b6 stories-marshmallow library is offered under the two clause BSD license. \u2014 \u2b50\ufe0f \u2014 The `stories-marshmallow` library is part of the SOLID python family.","title":"Home"},{"location":"#stories-marshmallow","text":"Use marshmallow schemas as stories context contract. Documentation | Source Code | Task Tracker A paragraph of text explaining the goal of the library\u2026","title":"Stories marshmallow"},{"location":"#pros","text":"A feature B feature etc","title":"Pros"},{"location":"#example","text":"A line of text explaining snippet below\u2026 >>> from marshmallow import Schema >>> from marshmallow.fields import String >>> from stories import story , Success >>> from stories_marshmallow import contract >>> class Purchase : ... ... @story ... def make ( I ): ... I . find_user ... ... def find_user ( self , state ): ... return Success () >>> @contract ( Purchase . make ) ... class State ( Schema ): ... ... user = String ()","title":"Example"},{"location":"#questions","text":"If you have any questions, feel free to create an issue in our Task Tracker . We have the question label exactly for this purpose.","title":"Questions"},{"location":"#enterprise-support","text":"If you have an issue with any version of the library, you can apply for a paid enterprise support contract. This will guarantee you that no breaking changes will happen to you. No matter how old version you're using at the moment. All necessary features and bug fixes will be backported in a way that serves your needs. Please contact proofit404@gmail.com if you're interested in it.","title":"Enterprise support"},{"location":"#license","text":"stories-marshmallow library is offered under the two clause BSD license. \u2014 \u2b50\ufe0f \u2014 The `stories-marshmallow` library is part of the SOLID python family.","title":"License"},{"location":"changelog/","text":"0.2.0 (2021-04-07) \u00b6 Features \u00b6 define story contract as marshmallow schema #4 ( 7e11cce ) \u2014 \u2b50\ufe0f \u2014 The `stories-marshmallow` library is part of the SOLID python family.","title":"Changelog"},{"location":"changelog/#020-2021-04-07","text":"","title":"0.2.0 (2021-04-07)"},{"location":"changelog/#features","text":"define story contract as marshmallow schema #4 ( 7e11cce ) \u2014 \u2b50\ufe0f \u2014 The `stories-marshmallow` library is part of the SOLID python family.","title":"Features"},{"location":"contract/","text":"Contract \u00b6 marshmallow schema could be used to define state contract on the story. Validators would be applied at the moment of variable assignment or passed to arguments. Validators are defined according to fields of the schema. >>> from marshmallow import Schema >>> from marshmallow.fields import Integer , List , String >>> from stories import story , Success >>> from stories_marshmallow import contract >>> class Action : ... ... @story ... def do ( I ): ... I . one ... I . two ... I . three ... ... def one ( self , state ): ... state . foo = self . get_foo () ... return Success () ... ... def two ( self , state ): ... state . bar = self . get_bar () ... return Success () ... ... def three ( self , state ): ... state . baz = self . get_baz () ... return Success () >>> @contract ( Action . do ) ... class State ( Schema ): ... foo = String () ... bar = Integer () ... baz = List ( Integer ()) In the code below we could see what would happen if all state variables were correct. >>> class Correct ( Action ): ... ... def get_foo ( self ): ... return 'a' ... ... def get_bar ( self ): ... return 1 ... ... def get_baz ( self ): ... return [ 1 ] >>> Correct () . do () And we would see clear error, if some variable didn't pass validation. >>> class Incorrect ( Action ): ... ... def get_foo ( self ): ... return 'a' ... ... def get_bar ( self ): ... return 'a' ... ... def get_baz ( self ): ... return [ 1 ] >>> Incorrect () . do () Traceback (most recent call last): ... _stories.exceptions.ContextContractError : This variable violates context contract: 'bar' <BLANKLINE> Function returned value: Incorrect.two <BLANKLINE> Violations: <BLANKLINE> bar: 'a' Not a valid integer. <BLANKLINE> Contract: bar: Integer # Variable in Incorrect.do","title":"Contract"},{"location":"contract/#contract","text":"marshmallow schema could be used to define state contract on the story. Validators would be applied at the moment of variable assignment or passed to arguments. Validators are defined according to fields of the schema. >>> from marshmallow import Schema >>> from marshmallow.fields import Integer , List , String >>> from stories import story , Success >>> from stories_marshmallow import contract >>> class Action : ... ... @story ... def do ( I ): ... I . one ... I . two ... I . three ... ... def one ( self , state ): ... state . foo = self . get_foo () ... return Success () ... ... def two ( self , state ): ... state . bar = self . get_bar () ... return Success () ... ... def three ( self , state ): ... state . baz = self . get_baz () ... return Success () >>> @contract ( Action . do ) ... class State ( Schema ): ... foo = String () ... bar = Integer () ... baz = List ( Integer ()) In the code below we could see what would happen if all state variables were correct. >>> class Correct ( Action ): ... ... def get_foo ( self ): ... return 'a' ... ... def get_bar ( self ): ... return 1 ... ... def get_baz ( self ): ... return [ 1 ] >>> Correct () . do () And we would see clear error, if some variable didn't pass validation. >>> class Incorrect ( Action ): ... ... def get_foo ( self ): ... return 'a' ... ... def get_bar ( self ): ... return 'a' ... ... def get_baz ( self ): ... return [ 1 ] >>> Incorrect () . do () Traceback (most recent call last): ... _stories.exceptions.ContextContractError : This variable violates context contract: 'bar' <BLANKLINE> Function returned value: Incorrect.two <BLANKLINE> Violations: <BLANKLINE> bar: 'a' Not a valid integer. <BLANKLINE> Contract: bar: Integer # Variable in Incorrect.do","title":"Contract"},{"location":"installation/","text":"Installation \u00b6 The stories-marshmallow library is available on PyPI. To install it run: pip install -U stories-marshmallow We use semantic release to publish packages as soon as pull requests land to the master branch. It's not necessary to use develompment version of the library. We officially support three last minor releases of CPython interpreter and last minor release of PyPy interpreter. We highly recommend the latest patch release of each Python series. \u2014 \u2b50\ufe0f \u2014 The `stories-marshmallow` library is part of the SOLID python family.","title":"Installation"},{"location":"installation/#installation","text":"The stories-marshmallow library is available on PyPI. To install it run: pip install -U stories-marshmallow We use semantic release to publish packages as soon as pull requests land to the master branch. It's not necessary to use develompment version of the library. We officially support three last minor releases of CPython interpreter and last minor release of PyPy interpreter. We highly recommend the latest patch release of each Python series. \u2014 \u2b50\ufe0f \u2014 The `stories-marshmallow` library is part of the SOLID python family.","title":"Installation"}]}